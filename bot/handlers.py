from aiogram import Router, types, F
from aiogram.filters import CommandStart
from keyboards import main_menu
from recipes.models import Recipe
import random
from utils import check_and_use_access
from aiogram.types import FSInputFile
from asgiref.sync import sync_to_async

router = Router()


@router.message(CommandStart())
async def cmd_start(message: types.Message):
    from recipes.models import BotUser
    user, created = await sync_to_async(BotUser.objects.get_or_create)(telegram_id=message.from_user.id)
    user.username = message.from_user.username
    await sync_to_async(user.save)()
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç FoodPlan –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç –ø–æ –¥—É—à–µ. –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –Ω–∏–∂–µ üëá",
        reply_markup=main_menu
        )


@router.message(F.text == "–°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç")
async def random_recipe(message: types.Message):
    acces = await check_and_use_access(message.from_user.id, message.from_user.username)
    if not acces:
        await message.answer("–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    
    
    recipes = await sync_to_async(list)(Recipe.objects.all())
    if not recipes:
        await message.answer("–í –Ω–∞—à–µ–π —Ä–µ—Ü–µ–ø—Ç–æ—Ç–µ–∫–µ –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ :(")
        return
    
    recipe = random.choice(recipes)
    image_path = recipe.image_url.path
    image = FSInputFile(image_path)
    
    caption = f"<b>{recipe.title}</b>\n\n{recipe.description}"
    buttons= [
        [types.InlineKeyboardButton(text="–ß—Ç–æ –∫—É–ø–∏—Ç—å?", callback_data=f"ingredients_{recipe.id}")],
        [types.InlineKeyboardButton(text="–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è", callback_data=f"instructions_{recipe.id}")],
    ]
    markup = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await message.answer_photo(photo=recipe.image_url, caption=caption, parse_mode="HTML", reply_markup=markup)

    
@router.callback_query(F.data.startswith("ingredients_"))
async def show_ingredients(callback: types.CallbackQuery):
    recipe_id = int(callback.data.split("_")[1])
    recipe = await sync_to_async(Recipe.objects.get)(id=recipe_id)
    
    await callback.message.answer(f"<b>–ß—Ç–æ –∫—É–ø–∏—Ç—å:</b>\n{recipe.ingredients}", parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("instructions_"))
async def show_instructions(callback: types.CallbackQuery):
    recipe_id = int(callback.data.split("_")[1])
    recipe = await sync_to_async(Recipe.objects.get)(id=recipe_id)
    await callback.message.answer(f"üë®<b>–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</b>\n{recipe.instructions}", parse_mode="HTML")
    await callback.answer()


@router.message(F.text == "–ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç")
async def ask_recipe_name(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞")


@router.message()
async def search_recipe(message: types.Message):
    query = message.text.lower()
    
    @sync_to_async
    def get_mathes():
        return list(Recipe.objects.filter(title__icontains=query))
    
    matches = await get_mathes()
    
    if matches:
        text = "–ù–∞–π–¥–µ–Ω–æ:\n" + "\n".join([f"‚Ä¢ {r.title}" for r in matches])
    else:
        text = "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
        
    await message.answer(text)